"use strict";(self.webpackChunkdelta_docs_1=self.webpackChunkdelta_docs_1||[]).push([[115],{4171:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Building a Domain/high level process","title":"High-level process","description":"The below process outlines at a high level the simplest way to build a domain and integrate it with delta.","source":"@site/docs/Building a Domain/high level process.md","sourceDirName":"Building a Domain","slug":"/Building a Domain/high level process","permalink":"/docs/docs/Building a Domain/high level process","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"High-level process","sidebar_label":"High-level process","sidebar_position":2},"sidebar":"docSidebar","previous":{"title":"The delta SDK","permalink":"/docs/docs/Building a Domain/delta sdk"},"next":{"title":"Domain components","permalink":"/docs/docs/Building a Domain/domain components"}}');var t=n(4848),o=n(8453);const l={title:"High-level process",sidebar_label:"High-level process",sidebar_position:2},r="High-level process for building a domain",a={},c=[];function d(e){const i={a:"a",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"high-level-process-for-building-a-domain",children:"High-level process for building a domain"})}),"\n",(0,t.jsx)(i.p,{children:"The below process outlines at a high level the simplest way to build a domain and integrate it with delta."}),"\n",(0,t.jsx)(i.p,{children:"The delta Executor SDK comes equipped with all primitives from the Base SDK and some default options for integrating with the delta network. Customizations can always be added later (see [ADD LINK] for more details)"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["Install core components","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["delta Executor SDK (",(0,t.jsx)(i.a,{href:"mailto:helen@repyhlabs.com",children:"contact us"})," for access)"]}),"\n",(0,t.jsxs)(i.li,{children:["Succinct ",(0,t.jsx)(i.a,{href:"https://github.com/succinctlabs/sp1",children:"SP1"})," (default configuration)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Build your domain","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Create your custom code using primitives from delta\u2019s SDK where needed"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Create your domain\u2019s Interface","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Set up a simple RPC Server using industry-standard frameworks (we recommend using ",(0,t.jsx)(i.a,{href:"https://actix.rs/docs/server/",children:"Actix"}),", ",(0,t.jsx)(i.a,{href:"http://crates.io/crates/axum-connect",children:"Axum"})," or ",(0,t.jsx)(i.a,{href:"https://github.com/tomaka/rouille",children:"Rouille"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Configure your domain","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Set up your domain\u2019s identity (keypair and Shard ID)"}),"\n",(0,t.jsx)(i.li,{children:"Connect your domain RPC to repyh runtime (included with the Executor SDK), and runtime RPC client to a chosen base layer validator"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Go live!"}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var s=n(6540);const t={},o=s.createContext(t);function l(e){const i=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:i},e.children)}}}]);