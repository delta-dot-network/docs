"use strict";(self.webpackChunkdelta_docs_1=self.webpackChunkdelta_docs_1||[]).push([[34],{2469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"background/vaults","title":"Vaults and Accounts on delta","description":"Overview of vaults and the delta account model","source":"@site/docs/background/vaults.md","sourceDirName":"background","slug":"/background/vaults","permalink":"/docs/docs/background/vaults","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Vaults and Accounts on delta","description":"Overview of vaults and the delta account model","sidebar_label":"Vaults","sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"Tokens","permalink":"/docs/docs/background/tokens"},"next":{"title":"Transactions","permalink":"/docs/docs/background/transactions"}}');var a=t(4848),o=t(8453);const i={title:"Vaults and Accounts on delta",description:"Overview of vaults and the delta account model",sidebar_label:"Vaults",sidebar_position:3},l="Accounts and Vaults on the delta Network",d={},r=[{value:"Overview",id:"overview",level:2},{value:"Token Holding Vaults (User Vaults)",id:"vaults",level:3},{value:"Additional Vault Types",id:"additional-vault-types",level:3},{value:"Accounts",id:"accounts",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"accounts-and-vaults-on-the-delta-network",children:"Accounts and Vaults on the delta Network"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Coming soon: ",(0,a.jsx)(n.strong,{children:"Escrow Vaults"}),", ",(0,a.jsx)(n.strong,{children:"Passkey"})," Account Recovery, ",(0,a.jsx)(n.strong,{children:"Multi-Sig"})," Vaults"]})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Vaults"})," exist on domains, and are identified by a ",(0,a.jsx)(n.strong,{children:"pubkey"})," and the domain's ",(0,a.jsx)(n.a,{href:"/docs/docs/background/glossary#shard",children:(0,a.jsx)(n.strong,{children:"shard ID"})})," to make up the ",(0,a.jsx)(n.strong,{children:"Vault ID"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Activity on domains is centered around vaults, and all user-level transactions which make up a SDL involve vaults."}),"\n",(0,a.jsx)(n.h3,{id:"vaults",children:"Token Holding Vaults (User Vaults)"}),"\n",(0,a.jsx)(n.p,{children:"The most common type of vault is a tokenHoldings vault."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Creation of a tokenHoldings vault is implicit. Whenever a new pubkey receives tokens on the domain, a tokenHoldings vault will be created for that VaultID."}),"\n",(0,a.jsx)(n.li,{children:"A valid signature from the vault's associated private key is required to debit from the vault"}),"\n",(0,a.jsx)(n.li,{children:"tokenHoldings vaults can contain any number of fungible and non-fungible tokens"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="token holdings data struct"',children:"pub struct TokenHoldings {\n    /// A mapping from (fungible) token IDs to their respective balances in plancks.\n    fungibles: HashMap<TokenId, Planck>,\n    /// A mapping fron NFT token ids to their respective holdings, that is, a\n    /// set of collectibles in the collection issued by the given token id.\n    nfts: HashMap<TokenId, nft::Holdings>,\n}\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"additional-vault-types",children:"Additional Vault Types"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/docs/docs/background/tokens#token-mints",children:"TokenMint Vaults"})," hold information about tokens (instead of the tokens themselves)."]}),"\n",(0,a.jsx)(n.p,{children:"TokenMints are structured as vaults due to the fact that they are affected by user-level transactions on domains similarly to tokenHoldings vaults."}),"\n",(0,a.jsx)(n.h3,{id:"accounts",children:"Accounts"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Subject to change. Below details represent v0.5 design."})}),"\n",(0,a.jsxs)(n.p,{children:["An ",(0,a.jsx)(n.strong,{children:"Account"})," is represented by a pubkey."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Each account can have one tokenHolding vault per domain"}),"\n",(0,a.jsx)(n.li,{children:"TokenHolding vaults owned by the same account will all share the same pubkey as part of the Vault ID"}),"\n",(0,a.jsx)(n.li,{children:"Transferring funds between vaults owned by the same account is a native transaction, which makes interop between domains seamless"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);